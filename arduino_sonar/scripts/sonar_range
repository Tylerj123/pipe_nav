#!/usr/bin/env python
import sys, time, serial

import rospy
from sensor_msgs.msg import Range

class sonar_range():
	def __init__(self):
		rospy.loginfo("Initialize sonar node")
		# topic where we publish
		self.sonar_pub = rospy.Publisher("/sonar", Range, queue_size=10)

		self.ser = serial.Serial()

		self.ser.port = "/dev/ttyACM0"

		self.ser.baudrate = 115200
		self.ser.bytesize = serial.EIGHTBITS #number of bits per bytes
		self.ser.parity = serial.PARITY_NONE #set parity check: no parity
		self.ser.stopbits = serial.STOPBITS_ONE #number of stop bits
		#self.ser.timeout = None          #block read
		self.ser.timeout = 1            #non-block read
		#self.ser.timeout = 2              #timeout block read
		self.ser.xonxoff = False     #disable software flow control
		self.ser.rtscts = False     #disable hardware (RTS/CTS) flow control
		self.ser.dsrdtr = False       #disable hardware (DSR/DTR) flow control
		self.ser.writeTimeout = 2     #timeout for write

	def serial_read(self):
		try:
			self.ser.open()
		except Exception, e:
			print "error open serial port: " + str(e)
			exit()

		if self.ser.isOpen():

			try:
				self.ser.flushInput() #flush input buffer, discarding all its contents
				self.ser.flushOutput()#flush output buffer, aborting current output

				msg_out = Range()
				msg_out.header.frame_id = "sonar"
				msg_out.radiation_type = 0 #ultrasound
				msg_out.field_of_view = 0.0
				msg_out.min_range = 0.05
				msg_out.max_range = 4.0

				while True:
					msg_out.range = int(self.ser.readline()) / 100.0
					msg_out.header.stamp = rospy.Time.now()
					self.sonar_pub.publish(msg_out)

				self.ser.close()
			except Exception, e1:
				print "error communicating...: " + str(e1)

		else:
			print "cannot open serial port "

def main(args):
	rospy.init_node('sonar_range', anonymous=True)

	sr = sonar_range()

	try:
		sr.serial_read()
	except KeyboardInterrupt:
		print "Shutting down sonar node"

if __name__ == '__main__':
    main(sys.argv)
